!(function( global, factory ) {
	if ( typeof module === "object" && typeof module.exports === "object" ) {
		module.exports = global.document ? factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "MicFlow requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {
	var MicFlow = function(id, property) {
		this.paint = null;
		this.tableDisable = false;
		this.nodeDom = {};
		this.nodeData={};
		this.lineDom={};
		this.lineData={};
		this.readonly=false;
		this.headTools=true;

		isMSIE();

		this.bgDiv = $(id);
		this.bgDiv.addClass("MicFlow");

		//顶部工具栏
		var headToolsBtn = "";
		if (MicFlow.remarks.headBtnsList) {
			for(var i=0;i<MicFlow.remarks.headBtnsList.length;++i){
				headToolsBtn += "<a href='javascript:void(0)' class='MicFlowHeadBtn' id='ico_"+ MicFlow.remarks.headBtnsList[i] +"' title='" + MicFlow.remarks.toolBtnsInfo[MicFlow.remarks.headBtnsList[i]] + "'><i class='ico_"+ MicFlow.remarks.headBtnsList[i] +"'></i></a>";
			}

			this.headArea = $("<div class='MicFlowHead' "+ (MicFlow.color.main? "style='border-bottom-color:"+MicFlow.color.main+"'" : "") +">"+ headToolsBtn +"</div>");
			this.bgDiv.append(this.headArea);

			this.headArea.find(".ico_undo").parent().addClass("a_disabled");
			this.headArea.find(".ico_redo").parent().addClass("a_disabled");
		}

		//this.mId = this.bgDiv.attr("id") || "MicFlow_" + (new Date).getTime();
		this.bgDiv.append("<div class='MicFlowWork' style=''></div>");
		this.workArea = $("<div class='MicFlowWorkInner' tabindex='0' style='width:" + this.bgDiv.width() + "px;height:" + this.bgDiv.height() + "px'></div>").attr({
			unselectable: "on",
			onselectstart: "return false",
			onselect: "document.selection.empty()"
		});
		this.bgDiv.children(".MicFlowWork").append(this.workArea);

		this.initPaint("paint_"+ id.replace("#", ""), this.bgDiv.width(), this.bgDiv.height());

		if (!this.readonly){
			this.initWork();
			//this.initSelectArea();
			if (MicFlow.remarks.headBtnsList)	this.intBtn();
		}
	};

	//读取语言配置文件
	var setLang = function(lang) {
		$("<script></script>").attr({ src: "lang/" + lang + ".js", type: 'text/javascript', id: 'loadscript' }).appendTo($('head'));
	}

	//判断是否为 低版本 IE
	var isMSIE = function() {
		MicFlow.prototype.useSVG = (navigator.userAgent.indexOf("MSIE 8.0") > 0 || navigator.userAgent.indexOf("MSIE 7.0") > 0 || navigator.userAgent.indexOf("MSIE 6.0") > 0) ? false : true;
	}

	var MicFormat = function(source, hash) {
		return source.replace(/{(\w+)}/g, function(match, item) {
			return typeof hash[item] != 'undefined' ? hash[item] : match;
		});
	};

	var inArray = function(search,array){
		for(var i in array){
			if(array[i]==search) {
				return true;
			}
		}
		return false;
	}

	var MousePoint = function(ev){
		if(!ev) ev = window.event;
		if(ev.pageX || ev.pageY){
			return {x:ev.pageX, y:ev.pageY};
		}
		return {
			x:ev.clientX + document.documentElement.scrollLeft - document.body.clientLeft,
			y:ev.clientY + document.documentElement.scrollTop  - document.body.clientTop
		};
	}

	var angle = function(pos1, pos2){
		var diff_x = pos2.x - pos1.x, diff_y = -(pos2.y - pos1.y);
		var angle2 = Math.atan(diff_y/diff_x), angle5 = Math.PI/8, angle6 = Math.PI/2 - angle5;
		var ret;
		if (angle2 > -angle5 && angle2 <= angle5) {
			ret = (pos1.x < pos2.x) ? 2 : 6;
		} else if (angle2 > angle5 && angle2 <= angle6) {
			ret = (pos1.x < pos2.x) ? 1 : 5;
		} else if (angle2 > -angle6 && angle2 <= -angle5) {
			ret = (pos1.x < pos2.x) ? 3 : 7;
		} else {
			ret = (pos1.y < pos2.y) ? 4 : 8;
		}
		return ret;
	}

	function calcBrokenlinePoints(sp, ep, type, cpoint){
		var ret;

		var p1 = {x: sp.offsetLeft, w: sp.offsetLeft + sp.offsetWidth, y: sp.offsetTop, h: sp.offsetTop + sp.offsetHeight, cx: sp.offsetLeft + sp.offsetWidth/2, cy: sp.offsetTop + sp.offsetHeight/2}, 
			p2 = {x: ep.offsetLeft, w: ep.offsetLeft + ep.offsetWidth, y: ep.offsetTop, h: ep.offsetTop + ep.offsetHeight, cx: ep.offsetLeft + ep.offsetWidth/2, cy: ep.offsetTop + ep.offsetHeight/2};

		var ps = [p1.cx, p1.cy], pe = [p2.cx, p2.cy];

		if(type === "lr"){
			m1 = [cpoint, p1.cy];
			m2 = [cpoint, p2.cy];

			if(m1[0] > p1.x && m1[0] < p1.w){
				m1[1] = p1.y > p2.y ? p1.y : p1.h; ps = m1;
			} else{
				ps[0] = m1[0] < p1.x ? p1.x : p1.w;
			}

			if(m2[0] > p2.x && m2[0] < p2.w){
				m2[1] = p1.y > p2.y ? p2.h : p2.y; pe = m2;
			} else{
				pe[0] = m2[0] < p2.x ? p2.x : p2.w;
			}
		} else if(type === "tb"){
			m1 = [p1.cx, cpoint];
			m2 = [p2.cx, cpoint];

			if(m1[1] > p1.y && m1[1] < p1.h){
				m1[0] = p1.x > p2.x ? p1.x : p1.w; ps = m1;
			} else{
				ps[1] = m1[1] < p1.y ? p1.y : p1.h;
			}

			if(m2[1] > p2.y && m2[1] < p2.h){
				m2[0] = p1.x > p2.x ? p2.w : p2.x; pe = m2;
			} else{
				pe[1] = m2[1] < p2.y ? p2.y : p2.h;
			}
		}

		return {"start":ps, m1:m1, m2:m2, "end":pe};;
	}

	var calcStartEnd = function(sp, ep){
		var p1 = {x: sp.offsetLeft, w: sp.offsetLeft + sp.offsetWidth, y: sp.offsetTop, h: sp.offsetTop + sp.offsetHeight, cx: sp.offsetLeft + sp.offsetWidth/2, cy: sp.offsetTop + sp.offsetHeight/2}, 
			p2 = {x: ep.offsetLeft, w: ep.offsetLeft + ep.offsetWidth, y: ep.offsetTop, h: ep.offsetTop + ep.offsetHeight, cx: ep.offsetLeft + ep.offsetWidth/2, cy: ep.offsetTop + ep.offsetHeight/2};

		var ps = [p1.cx, p1.cy], pe = [p2.cx, p2.cy];
		switch (angle(p1, p2)) {
			case 2: ps[0] = p1.w; pe[0] = p2.x; break;
			case 6: ps[0] = p1.x; pe[0] = p2.w; break;
			case 1: ps = [p1.w, p1.y]; pe = [p2.x, p2.h]; break;
			case 5: ps = [p1.x, p1.h]; pe = [p2.w, p2.y]; break;
			case 3: ps = [p1.w, p1.h]; pe = [p2.x, p2.y]; break;
			case 7: ps = [p1.x, p1.y]; pe = [p2.w, p2.h]; break;
			case 8: ps[1] = p1.y; pe[1] = p2.h; break;
			case 4: ps[1] = p1.h; pe[1] = p2.y; break;
		}
		return {"start": ps,"end": pe};
	}

	if (typeof noGlobal === "undefined") {
		window.MicFlow = MicFlow;
	};

	return MicFlow.prototype = {
		useSVG: "",
		getSvgMarker:function(id,color){
			var m=document.createElementNS("http://www.w3.org/2000/svg","marker");
			m.setAttribute("id",id);
			m.setAttribute("viewBox","0 0 6 6");
			m.setAttribute("refX",'5');
			m.setAttribute("refY",'3');
			m.setAttribute("markerUnits","strokeWidth");
			m.setAttribute("markerWidth",'6');
			m.setAttribute("markerHeight",'6');
			m.setAttribute("orient","auto");
			var path=document.createElementNS("http://www.w3.org/2000/svg","path");
			path.setAttribute("d","M 0 0 L 6 3 L 0 6 z");
			path.setAttribute("fill",color);
			path.setAttribute("stroke-width",'0');
			m.appendChild(path);
			return m;
		},
		//svg 画布初始
		initPaint: function(id, width, height) {
			this.paint=document.createElementNS("http://www.w3.org/2000/svg","svg");//可创建带有指定命名空间的元素节点
			this.workArea.prepend(this.paint);
			var arrow=document.createElementNS("http://www.w3.org/2000/svg","defs");
			this.paint.appendChild(arrow);
			arrow.appendChild(MicFlow.prototype.getSvgMarker("arrow1", MicFlow.color.line));
			arrow.appendChild(MicFlow.prototype.getSvgMarker("arrow2", MicFlow.color.mark));
			arrow.appendChild(MicFlow.prototype.getSvgMarker("arrow3", MicFlow.color.mark));

			this.paint.id = id;
			this.paint.style.width = width + "px";
			this.paint.style.height = height + "px";
		},
		initWork: function() {
			this.workArea.on("mousedown",".MicFlowItem",{inthis:this},function(e){
				if(!e) e = window.event;
				if(e.button === 2) return false;
				var hasMove = false;
				var node = e.data.inthis;

				var id = $(this).attr("id");
				var ev = MousePoint(e);
				var X = ev.x + node.workArea[0].parentNode.scrollLeft,
					Y = ev.y + node.workArea[0].parentNode.scrollTop;

				var thisNodeDom = node.nodeDom[id];
				var vX = X - thisNodeDom[0].offsetLeft, vY = Y - thisNodeDom[0].offsetTop;

				document.onmousemove=function(e){
					if (!e) e = window.event;
					var ev=MousePoint(e);
					if (X === ev.x- vX && Y === ev.y - vY) return false;
					X = ev.x - vX; Y = ev.y-vY;

					if(X<0)	X=0;
					if(Y<0)	Y=0;

					$("#"+id).css({left:X+"px",top:Y+"px"});

					hasMove = true;
				};

				document.onmouseup=function(){
					if (hasMove) node.moveNode(id, (X + node.workArea[0].parentNode.scrollLeft), (Y + node.workArea[0].parentNode.scrollTop));
					document.onmousemove=null;
					document.onmouseup=null;
					hasMovev = false;
				};
			});
		},
		initSelectArea: function() {
			document.onmousedown = function(e){
				var posx = e.clientX;
				var posy = e.clientY;
				var div = document.createElement("div");
				div.className = "tempDiv";
				div.style.left = e.clientX+"px";
				div.style.top = e.clientY+"px";
				this.bgDiv.children(".MicFlowWork").append(div);
				document.onmousemove = function(ev){
					div.style.left = Math.min(ev.clientX, posx) + "px";
					div.style.top = Math.min(ev.clientY, posy) + "px";
					div.style.width = Math.abs(posx - ev.clientX)+"px";
					div.style.height = Math.abs(posy - ev.clientY)+"px";
					document.onmouseup = function(){
						div.parentNode.removeChild(div);
						document.onmousemove = null;
						document.onmouseup = null;
					}
				}
			}
		},
		intBtn: function() {
			var nowBtn = null;

			this.headArea.on("click",{inthis:this},function(e){
				if(!e)e = window.event;

				var target = e.target;
				if(target.tagName==="DIV"||target.tagName==="SPAN")	return;
				else if(target.tagName==="A")	target=target.childNodes[0];

				var classname=$(target).attr("class");

				var btnType1 = ["new","open","save","undo","redo","reload","print"];
				if (classname) {
					if (nowBtn)
						$('#'+ nowBtn).css("background-color", "");

					if (!inArray(classname.replace("ico_", ""), btnType1)){
						//流程按钮
						$('#'+ classname).css("background-color", MicFlow.color.node);
						nowBtn = classname;
					} else {
						//功能按钮

					}
				}
			});

			this.workArea.on("click",{inthis:this},function(e){
				if(!e)e = window.event;
				var sys = e.data.inthis;
				var btn = (nowBtn) ? nowBtn.replace("ico_", "") : null;
				var max = Object.keys(sys.nodeDom).length + 1;
				if (btn == "cursor") {
					//选择指针 状态

					return;
				} else if (btn!=null && btn!="direct" && btn!="dashed"){
					//模块状态
					var ev = MousePoint(e);
					var point = [ev.x+this.parentNode.scrollLeft, ev.y+this.parentNode.scrollTop - 30];
					sys.addNode(new Date().getTime(),{name:"node_"+ max, left:point[0], top:point[1], type:btn});

					$('#'+ nowBtn).css("background-color", "");
					nowBtn = null;
				}
			});
		},
		//switchToolBtn: function() {
			//this.nowClickBtn
		//}
		setData: function(jsonData) {
			this.clearData();

			for(var i in jsonData.nodes)
				this.addNode(i, jsonData.nodes[i]);
			for(var j in jsonData.lines)
				this.addLine(j, jsonData.lines[j]);
		},
		clearData: function() {
			//this.setData({});
		},
		clearLines: function() {
			for(var id in this.lineDom)
				this.paint.removeChild(this.lineDom[id]);
		},
		addNode: function(id, nodeData) {
			var mark = nodeData.marked? " item_mark":"";
			var path = nodeData.paths? " item_path":"";

			this.nodeDom[id] = $(MicFormat("<div class = 'MicFlowItem{mark}{path}' id='{id}' style='top:{top}px; left:{left}px'><span class='icospan'>{name}</span></div>", ({ id:id, mark: mark, top:nodeData.top, left: nodeData.left, type:nodeData.type, name:nodeData.name, path:path })));
			this.nodeData[id]=nodeData;

			this.workArea.append(this.nodeDom[id]);
		},
		addLine: function(id, lineData) {
			var p1 = this.nodeDom[lineData.from] , p2 = this.nodeDom[lineData.to];//开始/结束点坐标
			if(!p1||!p2) return;

			this.lineData[id]=lineData;

			var linePoints;
			if(lineData.type!=="sl"){
				//折现
				linePoints = calcBrokenlinePoints(p1[0], p2[0], lineData.type, lineData.cp);
			} else {
				//直线
				linePoints = calcStartEnd(p1[0], p2[0]);
			}

			if (!linePoints) return;

			if(lineData.type==="sl")
				this.lineDom[id]=MicFlow.prototype.drawLine(id, linePoints.start, linePoints.end, lineData);
			else
				this.lineDom[id]=MicFlow.prototype.drawBrokenline(id, linePoints.start, linePoints.m1, linePoints.m2, linePoints.end, lineData);

			this.paint.appendChild(this.lineDom[id]);
		},
		drawLine: function(id, sp, ep, data) {
			var line=document.createElementNS("http://www.w3.org/2000/svg","g");
			var path=document.createElementNS("http://www.w3.org/2000/svg","path");
			var memo=document.createElementNS("http://www.w3.org/2000/svg","path");
			var text=document.createElementNS("http://www.w3.org/2000/svg","text");

			var cx=(ep[0]+sp[0])/2, cy=(ep[1]+sp[1])/2;

			if(id!=="") line.setAttribute("id",id);
			line.setAttribute("from",sp[0]+","+sp[1]);
			line.setAttribute("to",ep[0]+","+ep[1]);

			path.setAttribute("d","M "+sp[0]+" "+sp[1]+" L "+ep[0]+" "+ep[1]);
			path.setAttribute("stroke-width",data.marked? '2.0':'1.4');
			path.setAttribute("stroke-linecap","round");
			path.setAttribute("fill","none");
			if(data.dash)	path.setAttribute("style", "stroke-dasharray:6,5");

			if (data.marked) {
				path.setAttribute("stroke",data.color||MicFlow.color.mark);
				path.setAttribute("marker-end","url(#arrow2)");
			} else {
				path.setAttribute("stroke",data.color||MicFlow.color.line);
				path.setAttribute("marker-end","url(#arrow1)");
			}
			line.appendChild(path);
			return line;
		},
		drawBrokenline:function(id, sp, m1, m2, ep, data){
			var poly,strPath, text;
			var x=(m2[0]+m1[0])/2, y=(m2[1]+m1[1])/2;

			poly=document.createElementNS("http://www.w3.org/2000/svg","g");
			var path=document.createElementNS("http://www.w3.org/2000/svg","path");
			if(id!=="")	poly.setAttribute("id",id);
			poly.setAttribute("from",sp[0]+","+sp[1]);
			poly.setAttribute("to",ep[0]+","+ep[1]);
			strPath="M "+sp[0]+" "+sp[1];
			if(m1[0]!==sp[0]||m1[1]!==sp[1])
				strPath+=" L "+m1[0]+" "+m1[1];
			if(m2[0]!==ep[0]||m2[1]!==ep[1])
				strPath+=" L "+m2[0]+" "+m2[1];
			strPath+=" L "+ep[0]+" "+ep[1];
			path.setAttribute("d",strPath);
			path.setAttribute("stroke-width",data.marked? '2.0':'1.4');
			path.setAttribute("stroke-linecap","round");
			path.setAttribute("fill","none");
			if(data.dash)	path.setAttribute("style", "stroke-dasharray:6,5");
			if(data.marked){
				path.setAttribute("stroke",MicFlow.color.mark);
				path.setAttribute("marker-end","url(#arrow2)");
			}
			else{
				path.setAttribute("stroke",data.color||MicFlow.color.line);
				path.setAttribute("marker-end","url(#arrow1)");
			}
			poly.appendChild(path);
			return poly;
		},
		moveNode: function(id,left,top){
			this.nodeData[id].left = left;
			this.nodeData[id].top = top;

			if(left<0)	left=0;
			if(top<0)	top=0;

			$("#"+id).css({left:left+"px",top:top+"px"});

			this.nodeDom[id].offsetLeft = left;
			this.nodeDom[id].offsetTop = top;

			this.resetLines(id, this.nodeDom[id]);
		},
		resetLines: function(id, node){
			this.clearLines();
			for(var j in this.lineData)
				this.addLine(j, this.lineData[j]);
		},
		exportData:function(){
			var ret={};
			ret.nodes={};
			ret.lines={};
			for(var k1 in this.nodeData){
				if(!this.nodeData[k1].marked){
					delete this.nodeData[k1]["marked"];
				}
				ret.nodes[k1]=JSON.parse(JSON.stringify(this.nodeData[k1]));
			}
			for(var k2 in this.lineData){
				if(!this.lineData[k2].marked){
					delete this.lineData[k2]["marked"];
				}
				ret.lines[k2]=JSON.parse(JSON.stringify(this.lineData[k2]));
			}
			return ret;
		},
	},
	MicFlow.color = {
		font: "#15428B",
		node: "#C0CCDA",
		line: "#1D8CE0",
		lineFont: "#777",
		mark: "#FF0000",
		mix: "#B6F700",
		mixFont: "#777"
	},
	MicFlow.init = function(id, property) {
		MicFlow.remarks.headBtnsList = property.headBtnsList;
		setLang(property.lang);
		return new MicFlow(id, property)
	},
	MicFlow.remarks = {
		toolBtnsInfo: {},
		headBtnsList: {},
		extendRight: void 0,
		extendBottom: void 0
	},
	MicFlow;

}));